function [] = BuildCompClass(Name,Props,Val,Com,CusCom)
%% Templates
% class template
ClassHeader = ['classdef %s < Component \n \n'];
HeaderComments = (['%% %s is an autogenerated class that defines a %s model. \n', ...
    '%% %s \n \n', ...
    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n', ...
    '%% %s - Class creation \n ', ...
    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n \n']);
ClassEnd = ['end \n '];

% Properties group templates
PropertyHeader = ['properties \n'];
PropertySting = ['%% %s \n %s char = ''%s'' \n '];
PropertyDouble = ['%% %s \n %s double = %s \n '];
PropertyEnd = ['end \n \n'];

% Methods templates
ConstructorMethod = ['methods \n', ...
                        'function obj = %s(varargin) \n' ...          
                            'obj@Component(varargin{:}); %% calls the superclass constructor \n' ...                   
                        'end \n' ...
                    'end \n \n'];

%% build class
ClassContents = [];
ClassContents = [ClassContents, sprintf(ClassHeader,Name)];
ClassContents = [ClassContents, sprintf(HeaderComments,Name,Name,CusCom,date)];
ClassContents = [ClassContents, sprintf(PropertyHeader)];
for i = 1:length(Props)
    if isnan(str2double(Val{i}))
        ClassContents = [ClassContents sprintf(PropertySting,Com{i},Props{i},Val{i})];
    else
        ClassContents = [ClassContents sprintf(PropertyDouble,Com{i},Props{i},Val{i})];  
    end
end
ClassContents = [ClassContents, sprintf(PropertyEnd)];
ClassContents = [ClassContents, sprintf(ConstructorMethod,Name)];
ClassContents = [ClassContents, sprintf(ClassEnd)];

%% Create M file     
mcreate(Name,ClassContents);
end

%% m file creation
function mcreate(scriptname,Contents)  %and use variable names that have meaning
   scriptname = sprintf('%s.m', scriptname);
   fid = fopen(scriptname, 'wt'); %and use 't' with text files so eol are properly translated
   fprintf(fid, '%s', Contents);
   fclose(fid);
   edit(scriptname);
   %don't understand the purpose of these two lines:
%    type(scriptname);
%    delete(scriptname);
end
